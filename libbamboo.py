# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _libbamboo
else:
    import _libbamboo

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


BLAKE2B_NUMERIC_ID = _libbamboo.BLAKE2B_NUMERIC_ID
ED25519_NUMERIC_ID = _libbamboo.ED25519_NUMERIC_ID
MAX_ENTRY_SIZE = _libbamboo.MAX_ENTRY_SIZE
class PublishEd25519Blake2bEntryArgs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    out = property(_libbamboo.PublishEd25519Blake2bEntryArgs_out_get, _libbamboo.PublishEd25519Blake2bEntryArgs_out_set)
    out_length = property(_libbamboo.PublishEd25519Blake2bEntryArgs_out_length_get, _libbamboo.PublishEd25519Blake2bEntryArgs_out_length_set)
    payload_bytes = property(_libbamboo.PublishEd25519Blake2bEntryArgs_payload_bytes_get, _libbamboo.PublishEd25519Blake2bEntryArgs_payload_bytes_set)
    payload_length = property(_libbamboo.PublishEd25519Blake2bEntryArgs_payload_length_get, _libbamboo.PublishEd25519Blake2bEntryArgs_payload_length_set)
    public_key_bytes = property(_libbamboo.PublishEd25519Blake2bEntryArgs_public_key_bytes_get, _libbamboo.PublishEd25519Blake2bEntryArgs_public_key_bytes_set)
    public_key_length = property(_libbamboo.PublishEd25519Blake2bEntryArgs_public_key_length_get, _libbamboo.PublishEd25519Blake2bEntryArgs_public_key_length_set)
    secret_key_bytes = property(_libbamboo.PublishEd25519Blake2bEntryArgs_secret_key_bytes_get, _libbamboo.PublishEd25519Blake2bEntryArgs_secret_key_bytes_set)
    secret_key_length = property(_libbamboo.PublishEd25519Blake2bEntryArgs_secret_key_length_get, _libbamboo.PublishEd25519Blake2bEntryArgs_secret_key_length_set)
    backlink_bytes = property(_libbamboo.PublishEd25519Blake2bEntryArgs_backlink_bytes_get, _libbamboo.PublishEd25519Blake2bEntryArgs_backlink_bytes_set)
    backlink_length = property(_libbamboo.PublishEd25519Blake2bEntryArgs_backlink_length_get, _libbamboo.PublishEd25519Blake2bEntryArgs_backlink_length_set)
    lipmaalink_bytes = property(_libbamboo.PublishEd25519Blake2bEntryArgs_lipmaalink_bytes_get, _libbamboo.PublishEd25519Blake2bEntryArgs_lipmaalink_bytes_set)
    lipmaalink_length = property(_libbamboo.PublishEd25519Blake2bEntryArgs_lipmaalink_length_get, _libbamboo.PublishEd25519Blake2bEntryArgs_lipmaalink_length_set)
    is_end_of_feed = property(_libbamboo.PublishEd25519Blake2bEntryArgs_is_end_of_feed_get, _libbamboo.PublishEd25519Blake2bEntryArgs_is_end_of_feed_set)
    last_seq_num = property(_libbamboo.PublishEd25519Blake2bEntryArgs_last_seq_num_get, _libbamboo.PublishEd25519Blake2bEntryArgs_last_seq_num_set)

    def __init__(self):
        _libbamboo.PublishEd25519Blake2bEntryArgs_swiginit(self, _libbamboo.new_PublishEd25519Blake2bEntryArgs())
    __swig_destroy__ = _libbamboo.delete_PublishEd25519Blake2bEntryArgs

# Register PublishEd25519Blake2bEntryArgs in _libbamboo:
_libbamboo.PublishEd25519Blake2bEntryArgs_swigregister(PublishEd25519Blake2bEntryArgs)


def publish_ed25519_blake2b_entry(args):
    return _libbamboo.publish_ed25519_blake2b_entry(args)


